@page
@{
    ViewData["Title"] = "Cart";
    Layout = "/Areas/Shared/_Layout.cshtml";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>

<div class="container mt-4" style="width: 80%">
    <h2 style="text-align: center; margin-bottom: 1rem">Your Order</h2>

    <div id="cart-empty" style="display: none;">
        <p>Your cart is empty.</p>
    </div>

    <div id="cart-items" style="display: none;">
        <table id="mycart" class="table table-bordered">
            <thead>
                <tr>
                    <th style="width: 5%;">No.</th>
                    <th style="width: 50%;">Product Name</th>
                    <th style="width: 10%;">Price</th>
                    <th style="width: 5%;">Quantity</th>
                    <th style="width: 20%;">SubTotal</th>
                </tr>
            </thead>
            <tbody id="cart-items-body">
                <!-- Giỏ hàng sẽ được hiển thị ở đây -->
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="3"><strong>Total</strong></td>
                    <td id="total-quantity" style="text-align: center">0</td>
                    <td id="total-price" style="text-align: center">$0.00</td>
                </tr>
            </tfoot>
        </table>
    </div>

    <div id="cart-total" style="display: none;">
        <div class="d-flex justify-content-end gap-2">
            <button id="back-to-menu" class="btn btn-danger">Back to Menu</button>
            <button id="checkout-button" class="btn btn-primary">Checkout</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const savedCart = sessionStorage.getItem('cart');
        let cart = [];
        if (savedCart) {
            try {
                cart = JSON.parse(savedCart);
                updateCartUI(cart);
            } catch (e) {
                console.error('Error parsing cart data from sessionStorage:', e);
            }
        }

        function updateCartUI(cart) {
            const cartItemsDiv = document.getElementById('cart-items');
            const cartEmptyDiv = document.getElementById('cart-empty');
            const cartTotalDiv = document.getElementById('cart-total');
            const checkoutButton = document.getElementById('checkout-button');
            const cartItemsBody = document.getElementById('cart-items-body');
            let totalPrice = 0;
            let totalQuantity = 0;

            cartItemsBody.innerHTML = ''; // Clear current cart items
            if (cart.length === 0) {
                cartEmptyDiv.style.display = 'block';
                cartItemsDiv.style.display = 'none';
                cartTotalDiv.style.display = 'none';
                checkoutButton.disabled = true;
            } else {
                cartEmptyDiv.style.display = 'none';
                cartItemsDiv.style.display = 'block';
                cartTotalDiv.style.display = 'block';
                checkoutButton.disabled = false;

                cart.forEach((item, index) => {
                    const productElement = document.createElement('tr');
                    productElement.innerHTML = `
                            <td style="text-align: center; border: 2px solid black"">${index + 1}</td>
                            <td style="border: 2px solid black"">${item.productName}</td>
                            <td style="text-align: center; border: 2px solid black"">$${item.productPrice}</td>
                            <td style="text-align: center; border: 2px solid black"">${item.quantity}</td>
                            <td style="text-align: center; border: 2px solid black"">$${(item.productPrice * item.quantity).toFixed(2)}</td>
                            <input type="hidden" name="itemid" value="${item.productId}">
                            <input type="hidden" name="subprice" value="${item.productPrice}">
                        `;
                    cartItemsBody.appendChild(productElement);
                    totalPrice += item.productPrice * item.quantity;
                    totalQuantity += item.quantity;
                });

                document.getElementById('total-price').innerText = `$${totalPrice.toFixed(2)}`;
                document.getElementById('total-quantity').innerText = totalQuantity;
            }
        }

        window.updateQuantity = function (productId, size, quantity) {
            const item = cart.find(item => item.productId === productId && item.size === size);
            if (item) {
                item.quantity = parseInt(quantity);
                updateCartUI(cart);
                sessionStorage.setItem('cart', JSON.stringify(cart)); 
            }
        }

        document.getElementById('checkout-button').addEventListener('click', function () {
            if (cart.length > 0) {
                window.location.href = '/checkout';  
            } else {
                alert('Your cart is empty!');
            }
        });

        document.getElementById('back-to-menu').addEventListener('click', function () {
            sessionStorage.setItem('cart', JSON.stringify(cart)); 
            window.location.href = '/Shared/Order/OrderPage';  
        });
    });
</script>
